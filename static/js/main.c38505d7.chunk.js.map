{"version":3,"sources":["component/Timer.js","App.js","serviceWorker.js","index.js"],"names":["formattedSeconds","sec","Math","floor","slice","Stopwatch","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","secondsElapsed","laps","lastClearedIncrementer","incrementer","_this2","setInterval","setState","clearInterval","concat","react_default","a","createElement","className","Timer_Button","onClick","handleStartClick","bind","handleStopClick","handleLabClick","handleResetClick","map","lap","i","React","Component","Button","assign","type","App","Timer","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4LAIMA,EAAmB,SAACC,GAAD,OACvBC,KAAKC,MAAMF,EAAM,IACf,KACD,IAAMA,EAAM,IAAIG,OAAO,IAGpBC,cACJ,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CACXC,eAAgB,EAChBC,KAAM,GACNC,uBAAwB,MAE1BV,EAAKW,YAAc,KAPFX,kFAUA,IAAAY,EAAAT,KACjBA,KAAKQ,YAAcE,YAAa,kBAC9BD,EAAKE,SAAS,CACZN,eAAgBI,EAAKL,MAAMC,eAAiB,KAE9C,+CAIFO,cAAcZ,KAAKQ,aACnBR,KAAKW,SAAS,CACZJ,uBAAwBP,KAAKQ,yDAK/BI,cAAcZ,KAAKQ,aACnBR,KAAKW,SAAS,CACZN,eAAgB,EAChBC,KAAM,8CAKRN,KAAKW,SAAS,CACZL,KAAMN,KAAKI,MAAME,KAAKO,OAAO,CAACb,KAAKI,MAAMC,oDAK3C,OACES,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBAAmB3B,EAAiBU,KAAKI,MAAMC,gBAG9B,IAA9BL,KAAKI,MAAMC,gBACXL,KAAKQ,cAAgBR,KAAKI,MAAMG,uBAC9BO,EAAAC,EAAAC,cAACE,EAAD,CAAQD,UAAU,YAAYE,QAASnB,KAAKoB,iBAAiBC,KAAKrB,OAAlE,SACAc,EAAAC,EAAAC,cAACE,EAAD,CAAQD,UAAU,WAAWE,QAASnB,KAAKsB,gBAAgBD,KAAKrB,OAAhE,QAG4B,IAA9BA,KAAKI,MAAMC,gBACXL,KAAKQ,cAAgBR,KAAKI,MAAMG,uBAC9BO,EAAAC,EAAAC,cAACE,EAAD,CAAQD,UAAU,UAAUE,QAASnB,KAAKuB,eAAeF,KAAKrB,OAA9D,OACA,KAI4B,IAA9BA,KAAKI,MAAMC,gBACXL,KAAKQ,cAAgBR,KAAKI,MAAMG,uBAC9BO,EAAAC,EAAAC,cAACE,EAAD,CAAQD,UAAU,YAAYE,QAASnB,KAAKwB,iBAAiBH,KAAKrB,OAAlE,SACA,MAIJc,EAAAC,EAAAC,cAAA,MAAIC,UAAU,kBACVjB,KAAKI,MAAME,KAAKmB,IAAI,SAACC,EAAKC,GAAN,OAClBb,EAAAC,EAAAC,cAAA,MAAIC,UAAU,iBAAgBH,EAAAC,EAAAC,cAAA,cAASW,EAAI,GAA3C,KAAyDrC,EAAiBoC,eApEhEE,IAAMC,WA8ExBC,EAAS,SAAClC,GAAD,OACbkB,EAAAC,EAAAC,cAAA,SAAAlB,OAAAiC,OAAA,CAAQC,KAAK,UAAapC,EAA1B,CAAiCqB,UAAW,OAASrB,EAAMqB,cAI9CtB,IC5EAsC,0LARX,OACEnB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAEkB,EAAF,cAJUL,cCKEM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO3B,EAAAC,EAAAC,cAAC0B,EAAD,MAASC,SAASC,eAAe,SDuH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.c38505d7.chunk.js","sourcesContent":["import React from 'react';\n\n\n\nconst formattedSeconds = (sec) =>\n  Math.floor(sec / 60) +\n    ':' +\n  ('0' + sec % 60).slice(-2)\n  \n\nclass Stopwatch extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { \n      secondsElapsed: 0, \n      laps: [],\n      lastClearedIncrementer: null\n    };\n    this.incrementer = null;\n  }  \n    \n  handleStartClick() {\n    this.incrementer = setInterval( () =>\n      this.setState({\n        secondsElapsed: this.state.secondsElapsed + 1\n      })\n    , 1000);\n  }\n  \n  handleStopClick() {\n    clearInterval(this.incrementer);\n    this.setState({\n      lastClearedIncrementer: this.incrementer\n    });\n  }\n  \n  handleResetClick() {\n    clearInterval(this.incrementer);\n    this.setState({\n      secondsElapsed: 0,\n      laps: []\n    });\n  }\n  \n  handleLabClick() {\n    this.setState({\n      laps: this.state.laps.concat([this.state.secondsElapsed])\n    })\n  }\n  \n  render() {\n    return (\n      <div className=\"stopwatch\">\n        <div className=\"stopwatch-timer\">{formattedSeconds(this.state.secondsElapsed)}\n        \n   \n        {(this.state.secondsElapsed === 0 ||\n          this.incrementer === this.state.lastClearedIncrementer\n          ? <Button className=\"start-btn\" onClick={this.handleStartClick.bind(this)}>start</Button>\n          : <Button className=\"stop-btn\" onClick={this.handleStopClick.bind(this)}>stop</Button>\n          )}\n        \n        {(this.state.secondsElapsed !== 0 &&\n          this.incrementer !== this.state.lastClearedIncrementer\n          ? <Button className=\"lap-btn\" onClick={this.handleLabClick.bind(this)}>lap</Button>\n          : null\n          )}\n\n\n        {(this.state.secondsElapsed !== 0 &&\n          this.incrementer === this.state.lastClearedIncrementer\n          ? <Button className=\"reset-btn\" onClick={this.handleResetClick.bind(this)}>reset</Button>\n          : null\n          )}\n          </div>\n\n        <ul className=\"stopwatch-laps\">\n          { this.state.laps.map((lap, i) =>\n              <li className=\"stopwatch-lap\"><strong>{i + 1}</strong>/ {formattedSeconds(lap)}</li>)\n          }\n        </ul>\n      </div>\n    );\n  }\n}\n\n\n\nconst Button = (props) =>\n  <button type=\"button\" {...props} className={\"btn \" + props.className } />;\n\n\n\nexport default Stopwatch","import React, { Component } from 'react';\nimport Timer from './component/Timer';\nimport './index.css'\n\n\n\n\nclass App extends Component {\n  render() {\n    return (\n      <div>\n        < Timer />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}